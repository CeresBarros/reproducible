% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cloud.R
\name{cloudCheck}
\alias{cloudCheck}
\alias{cloudWrite}
\alias{cloudDownloadChecksums}
\alias{cloudUpdateChecksums}
\alias{cloudCache}
\title{Basic tool for using cloud-based caching}
\usage{
cloudCheck(toDigest, checksumsFileID = NULL, cloudFolderID = NULL)

cloudWrite(object, digest, cloudFolderID = NULL, checksums,
  checksumsFileID)

cloudDownloadChecksums(checksumsFileID)

cloudUpdateChecksums(checksums, checksumsFileID)

cloudCache(..., useCloud = getOption("reproducible.useCloud", TRUE),
  checksumsFileID = NULL, cloudFolderID = NULL)
}
\arguments{
\item{toDigest}{The R object to consider, e.g., all the arguments to a function}

\item{checksumsFileID}{A google file ID where the checksums data.table is located,
provided as a character string}

\item{cloudFolderID}{The google folder ID where a new checksums file should
 be written. This will only be used if \code{checksumsFileID} is not provided
provided as a character string}

\item{object}{The R object to write to cloud}

\item{digest}{The hash of the input arguments, outputted from \code{cloudCheck}}

\item{checksums}{A \code{data.table} that is outputted from \code{cloudCheck} that
is the the checksums file}

\item{...}{Passed to \code{\link{Cache}}}

\item{useCloud}{Logical. This allows this to be turned off; will send all arguments to
\code{Cache} (including possibly \code{useCache}, where all caching can be turned off)}

\item{cloudFolderID}{The google folder ID where a new object should
be written}
}
\description{
Very experimental

Very experimental

This is still very experimental. See examples. NOTE: this is essentially a
wrapper around \code{Cache}, so it will still use the local Cache.
}
\details{
\code{cloudDownloadChecksums} gets the checksums data.table directly.

\code{cloudDownloadChecksums} gets the checksums data.table directly.

This has \code{Cache} internally. The main goal of this function is to look at
local Cache first, if the object is there locally, then use it & upload it to
googledrive. If the object is not there locally, check on googledrive for the
object. If it is there, download it, then add it to the local Cache. If it is
not there, then run the function de novo, wrapped in \code{Cache} and upload
the object to googledrive (i.e., it will be in local Cache and cloud location).
}
\examples{
\dontrun{
# Make a folder on googledrive -- share it with yourself and anybody else -- either use
#   googledrive package or do this manually on drive.google.com
# Grab the share link -- pass it here to cloudFolderID
options("reproducible.useNewDigestAlgorithm" = TRUE) # need new approach for this to work correctly

# first time -- looks in cloudFolderID for checksums -- none there, so it makes it
#   then it runs the function, caching locally, and uploading to cloud -- copy exists in
#   2 places
a1 <- cloudCache(rnorm, 1, cloudFolderID = "/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK")
# second time -- sees that it is in both places, takes local
a2 <- cloudCache(rnorm, 1, cloudFolderID = "/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK")

# clear local -- get from cloud copy, make a local copy in cacheRepo
clearCache(ask = FALSE)
a3 <- cloudCache(rnorm, 1, cloudFolderID = "/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK")

# now both local and cloud exist
a4 <- cloudCache(rnorm, 1, cloudFolderID = "/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK")

# Clean up -- no functionality like clearCache (yet)
# list all files in cloudFolder -- should be 2 the checksums and the object
lsFiles <- googledrive::drive_ls(as_id("/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK"))
googledrive::drive_rm(as_id(lsFiles$id))

# Could also try something like this do googledrive has only objects that
#  are also in local cacheRepo and checksums is correct too
# Put one object back in cloud
a4 <- cloudCache(rnorm, 1, cloudFolderID = "/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK")
clearCache(ask = FALSE) # clear local copy only
bb <- Cache(rnorm, 3)   # make a new entry that is supposed to be local only
allCache <- showCache() # only has 1 objects, it is local only
cacheIDs <- allCache[tagKey == "cacheId", tagValue] # extract cacheIds that exist locally
lsFiles <- googledrive::drive_ls(as_id("/folders/1wjLM1vS394xW1wVdQK4ZAQZHaXPiuOzK"))
lsFiles <- lsFiles[!lsFiles$name \%in\% "checksums",]
toRm <- lsFiles[!lsFiles$name \%in\% cacheIDs,]
googledrive::drive_rm(as_id(toRm$id))
checksumsFileID <- attr(a4, "reproducible.checksumsFileID")
checksums <- cloudDownloadChecksums(checksumsFileID = checksumsFileID)
checksums <- checksums[hash \%in\% cacheIDs]
cloudUpdateChecksums(checksums, checksumsFileID)

}
}
\seealso{
\code{\link{Cache}}

\code{\link{Cache}}, \code{\link{cloudWrite}}, \code{\link{cloudCheck}}
}
