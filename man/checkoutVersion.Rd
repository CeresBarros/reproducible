% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/git.R, R/gitCommit.R
\name{checkoutVersion}
\alias{checkoutVersion}
\alias{checkoutVersion}
\title{Clone, pull, & checkout from github.com repositories}
\usage{
checkoutVersion(repo, localRepoPath = ".", cred = "")

checkoutVersion(repo, localRepoPath = ".", cred = "")
}
\arguments{
\item{repo}{Repository address in the format
\code{username/repo[/subdir][@ref|#pull]}. Alternatively, you can
specify \code{subdir} and/or \code{ref} using the respective parameters
(see below); if both are specified, the values in \code{repo} take
precedence.}

\item{localRepoPath}{Character string. The path into which the git repo should be
cloned, pulled, and checked out from.}

\item{cred}{Character string. Either the name of the environment variable
that contains the GitHub PAT or filename of the github Private Key File.}

\item{localRepoPath}{Character string. The path into which the git repo should be
cloned, pulled, and checked out from.}

\item{cred}{Character string. Either the name of the environment variable
that contains the GitHub PAT or filename of the github Private Key File.}
}
\description{
In reproducible research, not only do packages and R version have to be
consistent, but also specific versions of version controlled scripts. This
function allows a simple way to create an exactly copy locally of a git
repository. It can use ssh keys (including github deploy keys) or GitHub
Personal Access Tokens.

In reproducible research, not only do packages and R version have to be
consistent, but also specific versions of version controlled scripts. This
function allows a simple way to create an exactly copy locally of a git
repository. It can use ssh keys (including github deploy keys) or GitHub
Personal Access Tokens.
}
