% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packages.R
\name{Require}
\alias{Require}
\title{Repeatability-safe install and load packages, optionally with specific versions}
\usage{
Require(packages, packageVersionFile, libPath = .libPaths()[1],
  notOlderThan = NULL, install_githubArgs = list(),
  install.packagesArgs = list())
}
\arguments{
\item{packages}{Character vector of packages to install via
\code{install.packages}, then load (i.e., with \code{library})}

\item{packageVersionFile}{If provided, then this will override all \code{install.package}
calls with \code{versions::install.versions}}

\item{libPath}{The library path where all packages should be installed, and looked for to load
(i.e., call \code{library})}

\item{notOlderThan}{Time or Date. The \code{Cache} is used internally for
\code{tools::package_dependencies} and for already installed packages that
came from github. To purge the cache: \code{notOlderThan = Sys.time()}}

\item{install_githubArgs}{List of optional named arguments, passed to install_github}

\item{install.packagesArgs}{List of optional named arguments, passed to install.packages}
}
\description{
This is an "all in one" function that will run \code{install.packages} for
CRAN packages, \code{devtools::install_github} for GitHub.com packages and
will install specific versions of each package if
there is a \code{packageVersionFile} supplied.
Plus, when \code{packages} is provided as a character vector, or a
\code{packageVersionFile} is supplied, all package dependencies
will be first assessed for \code{unique(dependencies)} so the same package is
not installed multiple times. Finally \code{library} is called on the
\code{packages}. If packages are already installed (\code{packages} supplied),
and their version numbers are exact (when \code{packageVersionFile} is supplied),
then the "install" component will be skipped very quickly with a message.
}
\note{
This function will use \code{Cache} internally to determine the dependencies
of all \code{packages}. The cache repository will be inside the \code{libPath},
and will be named \code{.cache}. This will speed up subsequent calls to \code{Require}
dramatically.
It will not take into account version numbers for this
caching step. If package versions are updated manually by the user, then this cached
element should be wiped, using \code{notOlderThan = Sys.time()}.
}
\examples{
\dontrun{

# simple usage, like conditional install.packages then library
Require("stats") # analogous to require(stats), but slower because it checks for
                 #   pkg dependencies, and installs them, if missing
tempPkgFolder <- file.path(tempdir(), "Packages")
Require("crayon", libPath = tempPkgFolder) # install.packages first, then library

# make a package version snapshot
packageVersionFile <- file.path(tempPkgFolder, ".packageVersion.txt")
pkgSnapshot(libPath=tempPkgFolder, packageVersionFile)

Require("crayon", packageVersionFile = packageVersionFile)

# Create mismatching versions -- desired version is older than current installed
# This will install the older version, overwriting the newer version
desiredVersion <- data.frame(instPkgs="crayon", instVers = "1.3.2", stringsAsFactors = FALSE)
write.table(file = packageVersionFile, desiredVersion, row.names = FALSE)
Require("crayon", packageVersionFile = packageVersionFile)

# Mutual dependencies, only installs once -- e.g., httr
Require(c("cranlogs", "covr"), libPath = tempPkgFolder)

}

}
