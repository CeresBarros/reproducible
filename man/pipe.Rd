% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cache.R
\name{pipe}
\alias{pipe}
\alias{\%>\%}
\title{Pipe that is Cache-aware}
\usage{
lhs \%>\% rhs
}
\arguments{
\item{lhs}{A value or the magrittr placeholder.}

\item{rhs}{A function call using the magrittr semantics.}
}
\description{
A pipe that works with Cache.
This is a drop-in replacement for \code{\link[magrittr]{\%>\%}} and will
work identically when there is no Cache. To use this, simply add \code{\%>\% Cache()}
to a pipe sequence. This can be in the middle or at the end. See examples.
}
\details{
If there is a Cache in the pipe,
the behaviour of the pipe is altered. In the magrittr pipe, each step of the
pipe chain is evaluated one at a time, in sequence. This will not allow any useful
type of caching. Here, if there is a call to \code{Cache} in the pipe sequence,
the entire pipe chain before the call to \code{Cache} will have its arguments
evaluated and digested. This is compared to the cache repository database. If there
is an identical pipe sequence in the Cache respository, then it will return
the final result of the entire pipe up to the Cache call. If there is no
identical copy in the cache repository, then it will evaluate the pipe as per
normal, caching the final return value to the cache repository for later use.
}
\examples{
tmpdir <- file.path(tempdir(), "testCache")
checkPath(tmpdir, create = TRUE)
a <- rnorm(10, 16) \%>\% mean() \%>\% prod(., 6)
b <- rnorm(10, 16) \%>\% mean() \%>\% prod(., 6) \%>\% Cache(cacheRepo = tmpdir)
d <- rnorm(10, 16) \%>\% mean() \%>\% prod(., 6) \%>\% Cache(cacheRepo = tmpdir)
all.equal(b,d) # TRUE
all.equal(a,d) # different because 'a' uses a unique rnorm, 'd' uses the Cached rnorm

# Can put Cache in the middle of a pipe -- f2 and f4 use "cached result" until Cache
f1 <- rnorm(10, 16) \%>\% mean() \%>\% prod(., runif(1)) \%>\% Cache(cacheRepo = tmpdir)
f2 <- rnorm(10, 16) \%>\% mean() \%>\% prod(., runif(1)) \%>\% Cache(cacheRepo = tmpdir)
f3 <- rnorm(10, 16) \%>\% mean() \%>\% Cache(cacheRepo = tmpdir) \%>\% prod(., runif(1))
f4 <- rnorm(10, 16) \%>\% mean() \%>\% Cache(cacheRepo = tmpdir) \%>\% prod(., runif(1))
all.equal(f1, f2) # TRUE because the runif is before the Cache
all.equal(f3, f4) # different because the runif is after the Cache

unlink(tmpdir, recursive = TRUE)

}
