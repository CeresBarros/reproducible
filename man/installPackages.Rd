% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/packages.R
\name{installedPkgDeps}
\alias{installedPkgDeps}
\alias{.installPackages}
\title{Internal function to install packages}
\usage{
installedPkgDeps(pkgs, libPath, recursive = TRUE, depends = TRUE,
  imports = TRUE, suggests = FALSE)

.installPackages(packages, repos = getOption("repos"),
  githubPkgs = character(0), githubPkgNames, nonLibPathPkgs = character(0),
  install_githubArgs, install.packagesArgs = list(),
  libPath = .libPaths()[1], standAlone = standAlone,
  cacheRepo = cacheRepo, notOlderThan = notOlderThan)
}
\arguments{
\item{libPath}{The library path where all packages should be installed, and looked for to load
(i.e., call \code{library})}

\item{packages}{Character vector of packages to install via
\code{install.packages}, then load (i.e., with \code{library})}

\item{install_githubArgs}{List of optional named arguments, passed to install_github}

\item{install.packagesArgs}{List of optional named arguments, passed to install.packages}

\item{standAlone}{Logical. If \code{TRUE}, all packages will be installed and loaded strictly
from the \code{libPaths} only. If \code{FALSE}, all \code{.libPaths} will
be used to find the correct versions. This can be create dramatically faster
installs if the user has a substantial number of the packages already in their
personal library. In the case of \code{TRUE}, there will be a hidden file
place in the \code{libPath} directory that lists all the packages that were needed
during the Require call.}

\item{notOlderThan}{Time or Date. The \code{Cache} is used internally for
\code{tools::package_dependencies} and for already installed packages that
came from github. To purge the cache: \code{notOlderThan = Sys.time()}}

\item{gitHubPackages}{Character vectors indicating repository/packageName@branch}

\item{packageVersionFile}{Path to the package version file, defaults to
the \code{.packageVersions.txt}.}
}
\description{
Internal function to install packages
}
\examples{
\dontrun{
  .installPackages("crayon")
}
}
